// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: token.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (client_id, user_id, redirect_uri, scope, code, code_challenge, code_challenge_method, code_create_at, code_expires_in, access_id, access_create_at, access_expires_in, refresh_id, refresh_create_at, refresh_expires_in) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) 
ON CONFLICT (client_id, user_id) 
DO UPDATE SET 
    redirect_uri = $3, 
    scope = $4, 
    code = $5, 
    code_challenge = $6, 
    code_challenge_method = $7, 
    code_create_at = $8, 
    code_expires_in = $9, 
    access_id = $10, 
    access_create_at = $11, 
    access_expires_in = $12, 
    refresh_id = $13, 
    refresh_create_at = $14, 
    refresh_expires_in = $15
`

type CreateTokenParams struct {
	ClientID            uuid.UUID     `json:"client_id"`
	UserID              uuid.NullUUID `json:"user_id"`
	RedirectUri         string        `json:"redirect_uri"`
	Scope               string        `json:"scope"`
	Code                string        `json:"code"`
	CodeChallenge       string        `json:"code_challenge"`
	CodeChallengeMethod string        `json:"code_challenge_method"`
	CodeCreateAt        time.Time     `json:"code_create_at"`
	CodeExpiresIn       int64         `json:"code_expires_in"`
	AccessID            uuid.UUID     `json:"access_id"`
	AccessCreateAt      time.Time     `json:"access_create_at"`
	AccessExpiresIn     int64         `json:"access_expires_in"`
	RefreshID           uuid.UUID     `json:"refresh_id"`
	RefreshCreateAt     time.Time     `json:"refresh_create_at"`
	RefreshExpiresIn    int64         `json:"refresh_expires_in"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.exec(ctx, q.createTokenStmt, createToken,
		arg.ClientID,
		arg.UserID,
		arg.RedirectUri,
		arg.Scope,
		arg.Code,
		arg.CodeChallenge,
		arg.CodeChallengeMethod,
		arg.CodeCreateAt,
		arg.CodeExpiresIn,
		arg.AccessID,
		arg.AccessCreateAt,
		arg.AccessExpiresIn,
		arg.RefreshID,
		arg.RefreshCreateAt,
		arg.RefreshExpiresIn,
	)
	return err
}

const getTokenByAccess = `-- name: GetTokenByAccess :one
SELECT id, client_id, user_id, redirect_uri, scope, code, code_challenge, code_challenge_method, code_create_at, code_expires_in, access_id, access_create_at, access_expires_in, refresh_id, refresh_create_at, refresh_expires_in, user_agent, ip_address FROM tokens WHERE access_id = $1
`

func (q *Queries) GetTokenByAccess(ctx context.Context, accessID uuid.UUID) (Token, error) {
	row := q.queryRow(ctx, q.getTokenByAccessStmt, getTokenByAccess, accessID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.UserID,
		&i.RedirectUri,
		&i.Scope,
		&i.Code,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.CodeCreateAt,
		&i.CodeExpiresIn,
		&i.AccessID,
		&i.AccessCreateAt,
		&i.AccessExpiresIn,
		&i.RefreshID,
		&i.RefreshCreateAt,
		&i.RefreshExpiresIn,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const getTokenByCode = `-- name: GetTokenByCode :one
SELECT id, client_id, user_id, redirect_uri, scope, code, code_challenge, code_challenge_method, code_create_at, code_expires_in, access_id, access_create_at, access_expires_in, refresh_id, refresh_create_at, refresh_expires_in, user_agent, ip_address FROM tokens WHERE code = $1
`

func (q *Queries) GetTokenByCode(ctx context.Context, code string) (Token, error) {
	row := q.queryRow(ctx, q.getTokenByCodeStmt, getTokenByCode, code)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.UserID,
		&i.RedirectUri,
		&i.Scope,
		&i.Code,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.CodeCreateAt,
		&i.CodeExpiresIn,
		&i.AccessID,
		&i.AccessCreateAt,
		&i.AccessExpiresIn,
		&i.RefreshID,
		&i.RefreshCreateAt,
		&i.RefreshExpiresIn,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const getTokenByRefresh = `-- name: GetTokenByRefresh :one
SELECT id, client_id, user_id, redirect_uri, scope, code, code_challenge, code_challenge_method, code_create_at, code_expires_in, access_id, access_create_at, access_expires_in, refresh_id, refresh_create_at, refresh_expires_in, user_agent, ip_address FROM tokens WHERE refresh_id = $1
`

func (q *Queries) GetTokenByRefresh(ctx context.Context, refreshID uuid.UUID) (Token, error) {
	row := q.queryRow(ctx, q.getTokenByRefreshStmt, getTokenByRefresh, refreshID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.UserID,
		&i.RedirectUri,
		&i.Scope,
		&i.Code,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
		&i.CodeCreateAt,
		&i.CodeExpiresIn,
		&i.AccessID,
		&i.AccessCreateAt,
		&i.AccessExpiresIn,
		&i.RefreshID,
		&i.RefreshCreateAt,
		&i.RefreshExpiresIn,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const removeTokenByAccess = `-- name: RemoveTokenByAccess :exec
DELETE FROM tokens WHERE access_id = $1
`

func (q *Queries) RemoveTokenByAccess(ctx context.Context, accessID uuid.UUID) error {
	_, err := q.exec(ctx, q.removeTokenByAccessStmt, removeTokenByAccess, accessID)
	return err
}

const removeTokenByCode = `-- name: RemoveTokenByCode :exec
DELETE FROM tokens WHERE code = $1
`

func (q *Queries) RemoveTokenByCode(ctx context.Context, code string) error {
	_, err := q.exec(ctx, q.removeTokenByCodeStmt, removeTokenByCode, code)
	return err
}

const removeTokenByRefresh = `-- name: RemoveTokenByRefresh :exec
DELETE FROM tokens WHERE refresh_id = $1
`

func (q *Queries) RemoveTokenByRefresh(ctx context.Context, refreshID uuid.UUID) error {
	_, err := q.exec(ctx, q.removeTokenByRefreshStmt, removeTokenByRefresh, refreshID)
	return err
}

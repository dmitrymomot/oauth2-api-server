// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cleanUpExpiredUserVerificationsStmt, err = db.PrepareContext(ctx, cleanUpExpiredUserVerifications); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpExpiredUserVerifications: %w", err)
	}
	if q.createClientStmt, err = db.PrepareContext(ctx, createClient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClient: %w", err)
	}
	if q.createTokenStmt, err = db.PrepareContext(ctx, createToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateToken: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserVerificationStmt, err = db.PrepareContext(ctx, createUserVerification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserVerification: %w", err)
	}
	if q.deleteClientStmt, err = db.PrepareContext(ctx, deleteClient); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClient: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserVerificationsByEmailStmt, err = db.PrepareContext(ctx, deleteUserVerificationsByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserVerificationsByEmail: %w", err)
	}
	if q.deleteUserVerificationsByUserIDStmt, err = db.PrepareContext(ctx, deleteUserVerificationsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserVerificationsByUserID: %w", err)
	}
	if q.getClientStmt, err = db.PrepareContext(ctx, getClient); err != nil {
		return nil, fmt.Errorf("error preparing query GetClient: %w", err)
	}
	if q.getClientsByUserIDStmt, err = db.PrepareContext(ctx, getClientsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientsByUserID: %w", err)
	}
	if q.getTokenByAccessStmt, err = db.PrepareContext(ctx, getTokenByAccess); err != nil {
		return nil, fmt.Errorf("error preparing query GetTokenByAccess: %w", err)
	}
	if q.getTokenByCodeStmt, err = db.PrepareContext(ctx, getTokenByCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetTokenByCode: %w", err)
	}
	if q.getTokenByRefreshStmt, err = db.PrepareContext(ctx, getTokenByRefresh); err != nil {
		return nil, fmt.Errorf("error preparing query GetTokenByRefresh: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserVerificationByEmailStmt, err = db.PrepareContext(ctx, getUserVerificationByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserVerificationByEmail: %w", err)
	}
	if q.getUserVerificationByUserIDStmt, err = db.PrepareContext(ctx, getUserVerificationByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserVerificationByUserID: %w", err)
	}
	if q.getVerificationByUserIDAndEmailStmt, err = db.PrepareContext(ctx, getVerificationByUserIDAndEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetVerificationByUserIDAndEmail: %w", err)
	}
	if q.removeTokenByAccessStmt, err = db.PrepareContext(ctx, removeTokenByAccess); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTokenByAccess: %w", err)
	}
	if q.removeTokenByCodeStmt, err = db.PrepareContext(ctx, removeTokenByCode); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTokenByCode: %w", err)
	}
	if q.removeTokenByRefreshStmt, err = db.PrepareContext(ctx, removeTokenByRefresh); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTokenByRefresh: %w", err)
	}
	if q.updateClientStmt, err = db.PrepareContext(ctx, updateClient); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClient: %w", err)
	}
	if q.updateClientSecretStmt, err = db.PrepareContext(ctx, updateClientSecret); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientSecret: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cleanUpExpiredUserVerificationsStmt != nil {
		if cerr := q.cleanUpExpiredUserVerificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpExpiredUserVerificationsStmt: %w", cerr)
		}
	}
	if q.createClientStmt != nil {
		if cerr := q.createClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientStmt: %w", cerr)
		}
	}
	if q.createTokenStmt != nil {
		if cerr := q.createTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTokenStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserVerificationStmt != nil {
		if cerr := q.createUserVerificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserVerificationStmt: %w", cerr)
		}
	}
	if q.deleteClientStmt != nil {
		if cerr := q.deleteClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserVerificationsByEmailStmt != nil {
		if cerr := q.deleteUserVerificationsByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserVerificationsByEmailStmt: %w", cerr)
		}
	}
	if q.deleteUserVerificationsByUserIDStmt != nil {
		if cerr := q.deleteUserVerificationsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserVerificationsByUserIDStmt: %w", cerr)
		}
	}
	if q.getClientStmt != nil {
		if cerr := q.getClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientStmt: %w", cerr)
		}
	}
	if q.getClientsByUserIDStmt != nil {
		if cerr := q.getClientsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientsByUserIDStmt: %w", cerr)
		}
	}
	if q.getTokenByAccessStmt != nil {
		if cerr := q.getTokenByAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTokenByAccessStmt: %w", cerr)
		}
	}
	if q.getTokenByCodeStmt != nil {
		if cerr := q.getTokenByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTokenByCodeStmt: %w", cerr)
		}
	}
	if q.getTokenByRefreshStmt != nil {
		if cerr := q.getTokenByRefreshStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTokenByRefreshStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserVerificationByEmailStmt != nil {
		if cerr := q.getUserVerificationByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserVerificationByEmailStmt: %w", cerr)
		}
	}
	if q.getUserVerificationByUserIDStmt != nil {
		if cerr := q.getUserVerificationByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserVerificationByUserIDStmt: %w", cerr)
		}
	}
	if q.getVerificationByUserIDAndEmailStmt != nil {
		if cerr := q.getVerificationByUserIDAndEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVerificationByUserIDAndEmailStmt: %w", cerr)
		}
	}
	if q.removeTokenByAccessStmt != nil {
		if cerr := q.removeTokenByAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTokenByAccessStmt: %w", cerr)
		}
	}
	if q.removeTokenByCodeStmt != nil {
		if cerr := q.removeTokenByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTokenByCodeStmt: %w", cerr)
		}
	}
	if q.removeTokenByRefreshStmt != nil {
		if cerr := q.removeTokenByRefreshStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTokenByRefreshStmt: %w", cerr)
		}
	}
	if q.updateClientStmt != nil {
		if cerr := q.updateClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientStmt: %w", cerr)
		}
	}
	if q.updateClientSecretStmt != nil {
		if cerr := q.updateClientSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientSecretStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	cleanUpExpiredUserVerificationsStmt *sql.Stmt
	createClientStmt                    *sql.Stmt
	createTokenStmt                     *sql.Stmt
	createUserStmt                      *sql.Stmt
	createUserVerificationStmt          *sql.Stmt
	deleteClientStmt                    *sql.Stmt
	deleteUserStmt                      *sql.Stmt
	deleteUserVerificationsByEmailStmt  *sql.Stmt
	deleteUserVerificationsByUserIDStmt *sql.Stmt
	getClientStmt                       *sql.Stmt
	getClientsByUserIDStmt              *sql.Stmt
	getTokenByAccessStmt                *sql.Stmt
	getTokenByCodeStmt                  *sql.Stmt
	getTokenByRefreshStmt               *sql.Stmt
	getUserByEmailStmt                  *sql.Stmt
	getUserByIDStmt                     *sql.Stmt
	getUserVerificationByEmailStmt      *sql.Stmt
	getUserVerificationByUserIDStmt     *sql.Stmt
	getVerificationByUserIDAndEmailStmt *sql.Stmt
	removeTokenByAccessStmt             *sql.Stmt
	removeTokenByCodeStmt               *sql.Stmt
	removeTokenByRefreshStmt            *sql.Stmt
	updateClientStmt                    *sql.Stmt
	updateClientSecretStmt              *sql.Stmt
	updateUserEmailStmt                 *sql.Stmt
	updateUserPasswordStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		cleanUpExpiredUserVerificationsStmt: q.cleanUpExpiredUserVerificationsStmt,
		createClientStmt:                    q.createClientStmt,
		createTokenStmt:                     q.createTokenStmt,
		createUserStmt:                      q.createUserStmt,
		createUserVerificationStmt:          q.createUserVerificationStmt,
		deleteClientStmt:                    q.deleteClientStmt,
		deleteUserStmt:                      q.deleteUserStmt,
		deleteUserVerificationsByEmailStmt:  q.deleteUserVerificationsByEmailStmt,
		deleteUserVerificationsByUserIDStmt: q.deleteUserVerificationsByUserIDStmt,
		getClientStmt:                       q.getClientStmt,
		getClientsByUserIDStmt:              q.getClientsByUserIDStmt,
		getTokenByAccessStmt:                q.getTokenByAccessStmt,
		getTokenByCodeStmt:                  q.getTokenByCodeStmt,
		getTokenByRefreshStmt:               q.getTokenByRefreshStmt,
		getUserByEmailStmt:                  q.getUserByEmailStmt,
		getUserByIDStmt:                     q.getUserByIDStmt,
		getUserVerificationByEmailStmt:      q.getUserVerificationByEmailStmt,
		getUserVerificationByUserIDStmt:     q.getUserVerificationByUserIDStmt,
		getVerificationByUserIDAndEmailStmt: q.getVerificationByUserIDAndEmailStmt,
		removeTokenByAccessStmt:             q.removeTokenByAccessStmt,
		removeTokenByCodeStmt:               q.removeTokenByCodeStmt,
		removeTokenByRefreshStmt:            q.removeTokenByRefreshStmt,
		updateClientStmt:                    q.updateClientStmt,
		updateClientSecretStmt:              q.updateClientSecretStmt,
		updateUserEmailStmt:                 q.updateUserEmailStmt,
		updateUserPasswordStmt:              q.updateUserPasswordStmt,
	}
}

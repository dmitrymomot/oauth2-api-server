// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: client.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
    user_id,
    domain,
    secret,
    name,
    description,
    logo,
    internal
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, user_id, domain, secret, name, description, logo, internal, created_at, updated_at
`

type CreateClientParams struct {
	UserID      uuid.NullUUID  `json:"user_id"`
	Domain      string         `json:"domain"`
	Secret      []byte         `json:"secret"`
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Logo        sql.NullString `json:"logo"`
	Internal    bool           `json:"internal"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.queryRow(ctx, q.createClientStmt, createClient,
		arg.UserID,
		arg.Domain,
		arg.Secret,
		arg.Name,
		arg.Description,
		arg.Logo,
		arg.Internal,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Domain,
		&i.Secret,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.Internal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteClientStmt, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, user_id, domain, secret, name, description, logo, internal, created_at, updated_at FROM clients WHERE id = $1
`

func (q *Queries) GetClient(ctx context.Context, id uuid.UUID) (Client, error) {
	row := q.queryRow(ctx, q.getClientStmt, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Domain,
		&i.Secret,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.Internal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClientsByUserID = `-- name: GetClientsByUserID :many
SELECT id, user_id, domain, secret, name, description, logo, internal, created_at, updated_at FROM clients WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetClientsByUserID(ctx context.Context, userID uuid.NullUUID) ([]Client, error) {
	rows, err := q.query(ctx, q.getClientsByUserIDStmt, getClientsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Domain,
			&i.Secret,
			&i.Name,
			&i.Description,
			&i.Logo,
			&i.Internal,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients SET
    domain = $1,
    name = $2,
    description = $3,
    logo = $4
WHERE id = $5
RETURNING id, user_id, domain, secret, name, description, logo, internal, created_at, updated_at
`

type UpdateClientParams struct {
	Domain      string         `json:"domain"`
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Logo        sql.NullString `json:"logo"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.queryRow(ctx, q.updateClientStmt, updateClient,
		arg.Domain,
		arg.Name,
		arg.Description,
		arg.Logo,
		arg.ID,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Domain,
		&i.Secret,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.Internal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateClientSecret = `-- name: UpdateClientSecret :one
UPDATE clients SET secret = $1 WHERE id = $2 RETURNING id, user_id, domain, secret, name, description, logo, internal, created_at, updated_at
`

type UpdateClientSecretParams struct {
	Secret []byte    `json:"secret"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateClientSecret(ctx context.Context, arg UpdateClientSecretParams) (Client, error) {
	row := q.queryRow(ctx, q.updateClientSecretStmt, updateClientSecret, arg.Secret, arg.ID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Domain,
		&i.Secret,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.Internal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
